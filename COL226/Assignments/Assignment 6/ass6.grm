%%

%eop EOF SEMI


%pos int

%term INT of int
	| REAL of real
	| BOOL of bool
	| VAR of string
	| IDEN of string
	| GOESTO
	| FN
	| EQUAL
	| ASSIGN
	| NOTEQUAL
	| LESSERTHAN
	| GREATERTHAN
	| IN
	| LET 
	| END 
	| IF 
	| ELSE
	| THEN
	| FI 
	| LOCAL 
	| COMMA 
	| PLUS
	| LPAREN 
	| RPAREN 
	| SUB 
	| MUL 
	| BOXLPAREN 
	| BOXRPAREN
	| DIV
	| DOT 
	| AND 
	| LCURL
	| RCURL
	| OR 
	| EOF 
	| COLON
	| SEMI


%nonterm PROG of Absyn.program
	| EXPR of Absyn.expr
	| EXPRLIST of Absyn.expr list
	| EXPRLISTC of Absyn.expr list
	| STRINGLIST of string list
	| DEFN of Absyn.expr
	| DEFNLIST of Absyn.expr list

%name Calc

%prefer PLUS MUL DIV SUB

%start PROG

%noshift EOF SEMI
%verbose
%%


PROG: EXPRLIST						(Absyn.Program EXPRLIST)

EXPRLIST: EXPR DOT						([EXPR])
		| EXPR DOT EXPRLIST				([EXPR]@EXPRLIST)


EXPR : INT           			(Absyn.Expr_int INT)
	| IDEN 						(Absyn.Expr_string IDEN)
	| REAL						(Absyn.Expr_real REAL)
	| BOOL 	 	  				(Absyn.Expr_bool (BOOL))
	| LPAREN EXPR RPAREN 		(EXPR)
	| EXPR PLUS EXPR   			(Absyn.Expr_bin (Absyn.ADD, EXPR1, EXPR2))
	| EXPR MUL EXPR   			(Absyn.Expr_bin (Absyn.MUL, EXPR1, EXPR2))
	| EXPR DIV EXPR    			(Absyn.Expr_bin (Absyn.DIV, EXPR1, EXPR2))
	| EXPR SUB EXPR    			(Absyn.Expr_bin (Absyn.SUB, EXPR1, EXPR2))
	| EXPR AND EXPR				(Absyn.Expr_bin (Absyn.AND,EXPR1,EXPR2))
	| EXPR OR EXPR				(Absyn.Expr_bin (Absyn.OR,EXPR1,EXPR2))
	| EXPR EQUAL EXPR			(Absyn.Expr_bin (Absyn.EQUALTO,EXPR1,EXPR2))	
	| EXPR NOTEQUAL EXPR		(Absyn.Expr_bin (Absyn.NOTEQUAL,EXPR1,EXPR2))				
	| EXPR GREATERTHAN EXPR		(Absyn.Expr_bin (Absyn.GREATER,EXPR1,EXPR2))				
	| EXPR LESSERTHAN EXPR		(Absyn.Expr_bin (Absyn.LESSER,EXPR1,EXPR2))
	| IF EXPR THEN EXPR ELSE EXPR FI 
								(Absyn.Expr_if(EXPR1,EXPR2,EXPR3))
	| IDEN ASSIGN EXPR 			(Absyn.Expr_assign (IDEN,EXPR))
	| FN LPAREN LPAREN STRINGLIST RPAREN COMMA EXPR RPAREN
								(Absyn.Expr_function (STRINGLIST, EXPR))
	| BOXLPAREN EXPRLISTC BOXRPAREN 	
								(Absyn.Expr_list EXPRLISTC)
	| LOCAL DEFN IN DEFN END 	(Absyn.Expr_LocalInEnd(DEFN1,DEFN2))
	| LET DEFN IN EXPR END 		(Absyn.Expr_LetInEnd(DEFN,EXPR))
	| IDEN LPAREN EXPRLISTC RPAREN
								(Absyn.Expr_App(Absyn.Expr_string IDEN,Absyn.Expr_list(EXPRLISTC)))
	| LET EXPR IN EXPR END 		(Absyn.Expr_LetInEnd(EXPR1,EXPR2))


STRINGLIST: IDEN				([IDEN])
	| IDEN COMMA STRINGLIST		(IDEN::STRINGLIST)

EXPRLISTC: EXPR 				([EXPR])
	| EXPR COMMA EXPRLISTC 		(EXPR::EXPRLISTC)

DEFN: IDEN ASSIGN EXPR 			(Absyn.Expr_assign (IDEN,EXPR))
	| BOXLPAREN DEFNLIST BOXRPAREN 		(Absyn.Expr_assignpar (DEFNLIST))
	| BOXLPAREN DEFN COMMA DEFN BOXRPAREN
								(Absyn.Expr_assignseq (DEFN1,DEFN2))

DEFNLIST: DEFN 					([DEFN])
	| DEFN COLON DEFNLIST		(DEFN::DEFNLIST)