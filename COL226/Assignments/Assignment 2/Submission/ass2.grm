%%

%eop EOF SEMI

(* %pos declares the type of positions for terminals.
   Each symbol has an associated left and right position. *)

%pos int

%right MULT DIV
%right SUB PLUS
%right AND OR EQUALTO NOTEQUAL GREATER GREATEREQ LESSER LESSEREQ

%term IDEN of string
	| VAR of string 
	| CONSINT of int 
	| CONSREAL of real
	| BOOLEAN of bool
	| AND
	| OR
	| FUNSY
	| COMMA
	| NOT
	| PLUS 
	| MULT 	
	| SUB
	| DIV
	| MOD
	| ABS
	| POW
	| EQUALTO
	| NOTEQUAL
	| GREATER
	| LESSER
	| GREATEREQ
	| LESSEREQ
	| IF
	| DOT
	| LPAREN
	| RPAREN
	| EOF
	| SEMI

%nonterm PROG of Absyn.program
	| DECL of Absyn.dec
	| FACT of Absyn.fact
	| PRED of Absyn.pred 
	| RULE of Absyn.rule
	| HEAD of Absyn.head
	| BODY of Absyn.body
	| PREDSYM of Absyn.predsymbol
	| TERM of Absyn.term
	| BINARYOP of Absyn.binaryop
	| UNARYOP of Absyn.unaryop
	| EXPR of Absyn.expr
	| TERMLIST of Absyn.term list 
	| PREDLIST of Absyn.pred list
	| DECLLIST of Absyn.dec list
	(*| START of Absyn.program *)

%name Calc

%prefer PLUS MULT DIV SUB

%start PROG

%noshift EOF
%verbose
%%

(* the parser returns the value associated with the expression *)

PROG: DECLLIST						(Absyn.Program DECLLIST)

DECL: FACT 							(Absyn.Decfact FACT)
	| RULE 							(Absyn.Decrule RULE)

DECLLIST: DECL 						([DECL])
		| DECL DECLLIST				([DECL]@DECLLIST)

FACT: PRED DOT 						(Absyn.FACT(PRED))

PRED: PREDSYM LPAREN TERMLIST RPAREN (Absyn.PRED (PREDSYM,TERMLIST))

RULE: HEAD IF BODY DOT 				(Absyn.RULE (HEAD,BODY))

HEAD: PRED 							(Absyn.HEAD PRED)

BODY: PREDLIST 						(Absyn.BODY PREDLIST)

PREDLIST: PRED 						([PRED])
		| PRED COMMA PREDLIST 		([PRED]@PREDLIST)

PREDSYM: IDEN 						(Absyn.PREDS IDEN)

TERM: EXPR 							(Absyn.Term_expr EXPR)
	| FUNSY LPAREN TERMLIST RPAREN 	(Absyn.Term_fsymbol TERMLIST)

TERMLIST: TERM 						([TERM])
	| TERM COMMA TERMLIST			([TERM] @TERMLIST)


EXPR : CONSINT           			(Absyn.Expr_int CONSINT)
		| CONSREAL					(Absyn.Expr_real CONSREAL)
		| VAR               		(Absyn.Expr_var (VAR))
		| BOOLEAN    				(Absyn.Expr_bool (BOOLEAN))
		| EXPR PLUS EXPR   			(Absyn.Expr_bin (Absyn.ADD, EXPR1, EXPR2))
		| EXPR MULT EXPR   			(Absyn.Expr_bin (Absyn.MUL, EXPR1, EXPR2))
		| EXPR DIV EXPR    			(Absyn.Expr_bin (Absyn.DIV, EXPR1, EXPR2))
		| EXPR SUB EXPR    			(Absyn.Expr_bin (Absyn.SUB, EXPR1, EXPR2))
		| EXPR MOD EXPR				(Absyn.Expr_bin (Absyn.MOD,EXPR1,EXPR2))
		| EXPR AND EXPR				(Absyn.Expr_bin (Absyn.AND,EXPR1,EXPR2))
		| EXPR OR EXPR				(Absyn.Expr_bin (Absyn.OR,EXPR1,EXPR2))
		| EXPR POW EXPR				(Absyn.Expr_bin (Absyn.POW,EXPR1,EXPR2))
		| EXPR EQUALTO EXPR			(Absyn.Expr_bin (Absyn.EQUALTO,EXPR1,EXPR2))	
		| EXPR NOTEQUAL EXPR		(Absyn.Expr_bin (Absyn.NOTEQUAL,EXPR1,EXPR2))				
		| EXPR GREATER EXPR			(Absyn.Expr_bin (Absyn.GREATER,EXPR1,EXPR2))				
		| EXPR LESSER EXPR			(Absyn.Expr_bin (Absyn.LESSER,EXPR1,EXPR2))				
		| EXPR GREATEREQ EXPR		(Absyn.Expr_bin (Absyn.GREATEREQ,EXPR1,EXPR2))
		| EXPR LESSEREQ EXPR		(Absyn.Expr_bin (Absyn.LESSEREQ,EXPR1,EXPR2))
		| NOT LPAREN EXPR RPAREN 	(Absyn.Expr_un  (Absyn.NOT,EXPR))		
		| ABS LPAREN EXPR RPAREN	(Absyn.Expr_un  (Absyn.ABS,EXPR))	

		(*| EXP CARAT EXP   (Absyn.NODE ("carat", [EXP1, EXP2]))*)
