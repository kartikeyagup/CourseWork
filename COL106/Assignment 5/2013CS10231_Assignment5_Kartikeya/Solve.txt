	Point ending=maze->getEndPoint();
	pq->push(maze->getStartPoint());
	bool solved=0;
	while ((pq->size()>0) && (solved!=1))
	{
		Point considered=pq->top();
		pq->pop();
		if (ending.isEqual(considered))
		{
			solved=1;
			maze->setVisited(considered);
		}
		else if ((maze->isVisited(considered)))
		{
			NULL;
		}
		else
		{
			maze->setVisited(considered);
			int r1=considered.getRow();
            int c1=considered.getColumn();
           	Point p1= Point(r1-1,c1);
           	if ((maze->isInBounds(p1)) && (maze->isWall(p1)!=1) && !(maze->isVisited(p1)))
           		pq->push(p1);
           	Point p2= Point(r1+1,c1);
           	if ((maze->isInBounds(p2)) && (maze->isWall(p2)!=1) && !(maze->isVisited(p2)))
           		pq->push(p2);
           	Point p3= Point(r1,c1-1);
           	if ((maze->isInBounds(p3)) && (maze->isWall(p3)!=1) && !(maze->isVisited(p3)))
           		pq->push(p3);
           	Point p4= Point(r1,c1+1);
           	if ((maze->isInBounds(p4)) && (maze->isWall(p4)!=1) && !(maze->isVisited(p4)))
           		pq->push(p4);
        }
	}

