void solve(Maze * maze, DequeADT<Point> * dq)
{
    Point ending1=maze->getEndPoint();
    dq->push_front(maze->getStartPoint());
    bool solved=0;
    while ((dq->size()>0) && (solved!=1))
    {
        Point considered=dq->front();
        dq->pop_front();
        if (ending1.isEqual(considered))
        {
            solved=1;
        }
        else if ((maze->isVisited(considered)) || (maze->isWall(considered)))
        {
            2==2;
        }
        else
        {
            maze->setVisited(considered);
            int r1=considered.getRow();
            int c1=considered.getColumn();
            int d1=ending1.distanceFrom(considered);
            Point p1= Point(r1-1,c1);
            int d2=p1.distanceFrom(ending1);
            if (d2<d1)
            {
                if (maze->isInBounds(p1))
                {
                    dq->push_front(p1);
                }
            }
            else
            {
                if (maze->isInBounds(p1))
                dq->push_back(p1);
            }
            Point p2=Point(r1+1,c1);
            int d3=ending1.distanceFrom(p2);
            if (d3<d1)
            {
                if (maze->isInBounds(p2))
                dq->push_front(p2);
            }
            else
            {
                if (maze->isInBounds(p2))
                dq->push_back(p2);
            }
            Point p3= Point(r1,c1-1);
            int d4=ending1.distanceFrom(p3);
            if (d4<d1)
            {
                if (maze->isInBounds(p3))
                dq->push_front(p3);
            }
            else
            {
                if (maze->isInBounds(p3))
                dq->push_back(p3);
            }
            Point p4=Point(r1,c1+1);
            int d5=ending1.distanceFrom(p4);
            if (d5<d1)
            {
                if (maze->isInBounds(p4))
                dq->push_front(p4);
            }
            else
            {
                if (maze->isInBounds(p4))
                dq->push_back(p4);
            }
        }
    }
}
